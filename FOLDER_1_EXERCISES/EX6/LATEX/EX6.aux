\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}{section.1}}
\@writefile{lot}{\contentsline {table}{\numberline {1}{\ignorespaces  The code generation module can be roughly divided into two phases: from AST to IR, and then from IR to the actual assembley file. }}{1}{table.1}}
\newlabel{Table_The_Two_Phases_Of_Code_Gen}{{1}{1}{The code generation module can be roughly divided into two phases: from AST to IR, and then from IR to the actual assembley file}{table.1}{}}
\@writefile{toc}{\contentsline {section}{\numberline {2}IR Specification}{1}{section.2}}
\@writefile{toc}{\contentsline {paragraph}{BINOP}{1}{section*.1}}
\@writefile{toc}{\contentsline {paragraph}{SEQ}{1}{section*.2}}
\@writefile{lot}{\contentsline {table}{\numberline {2}{\ignorespaces  The LIR tree nodes. }}{2}{table.2}}
\newlabel{Table_LIR_API_StarKist}{{2}{2}{The LIR tree nodes}{table.2}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Translation from LIR tree to ASM file}{2}{section.3}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Input}{2}{section.4}}
\@writefile{toc}{\contentsline {section}{\numberline {5}Output}{2}{section.5}}
\@writefile{toc}{\contentsline {section}{\numberline {6}Submission Guidelines}{2}{section.6}}
\@writefile{toc}{\contentsline {paragraph}{Execution parameters}{3}{section*.3}}
